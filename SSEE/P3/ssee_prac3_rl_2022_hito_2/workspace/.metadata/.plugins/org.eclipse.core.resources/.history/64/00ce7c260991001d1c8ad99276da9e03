/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xiomodule.h"

// Variable para inicializar la E/S. Se pone global
// para que puedan usarla los manejadores de interrupciones
XIOModule iomodule;


// Manejador de Interrupción para el FIT1.
// Habrá que conmutar el led de parpadeo cada 0,5 segundos,
// enviando su nuevo valor por el GPO3 cuando haya que cambiarlo.
// Para ello avisaremos al bucle principal de este evento y en él se tratará.

// Definición de variables para el control del parpadeo del led
u8 contador = 0, led;

// Variable global con función de semáforo para la función del FIT1
u8 intc_fit1 = 0;

void Manejador_Int_Temporizador1(void* ref)
{
	intc_fit1 = 1;
}

// Manejador de Interrupción Externa.
// Cuando se indique desde el exterior habrá que atender a este evento,
// que nos indicará que los resultados ya están calculados y hay que
// recibirlos y mostrarlos por pantalla posteriormente.
// Para ello avisaremos al bucle principal de este evento y en él se tratará.

// Definición de variables para guardar los datos de entrada
u32 GPI1;	// Variable para guardar el valor del GPI1
u8 GPI2;	// Variable para guardar el valor del GPI2

// Definición de arrays para guardar las cifras BCD del resultado
u8 result_BCD_real[4], result_BCD_imag[4];
// Definición de variables para guardar los signos del resultado
u8 signo_real, signo_imag;

u16 result_BCD_real, result_BCD_imag;
u8 buf_real[4], buf_imag[4];


// Variable global con función de semáforo para la función de la interrupción externa
u8 intc_ext = 0;

void Manejador_INTC(void* ref)
{
	intc_ext = 1;
}

int main()
{
		u32 data;

		// Define la variable para el buffer de entrada
		u8 rx_buf[5];
		// Definición de las variables para mandar por los GPOs
		u8 cod_tecla, tecla_pulsada;

		// Inicializa el micro
		init_platform();


		// Inicializa la E/S para GPI y GPO y el módulo de la UART para obtener la dirección base:
		data = XIOModule_Initialize(&iomodule, XPAR_IOMODULE_0_DEVICE_ID);
		data = XIOModule_Start(&iomodule);
		data = XIOModule_CfgInitialize(&iomodule, NULL, 1);


		// Inicializaciones para las interrupciones

		// Iniciamos el manejador de instrucciones
		microblaze_register_handler(XIOModule_DeviceInterruptHandler, XPAR_IOMODULE_0_DEVICE_ID);

		// Registramos el manejador de interrupciones para el FIT1 "Manejador_Int_Temporizador1",
		XIOModule_Connect(&iomodule, XIN_IOMODULE_FIT_1_INTERRUPT_INTR, Manejador_Int_Temporizador1, NULL);

		// Activamos la interrupción para FIT1:
		XIOModule_Enable(&iomodule, XIN_IOMODULE_FIT_1_INTERRUPT_INTR);

		// Registramos el manejador de interrupciones para INTC (Interrupción externa)"Manejador_INTC" :
		XIOModule_Connect(&iomodule, XIN_IOMODULE_EXTERNAL_INTERRUPT_INTR, Manejador_INTC, NULL);

		// Activamos la interrupción para INTC:
		XIOModule_Enable(&iomodule, XIN_IOMODULE_EXTERNAL_INTERRUPT_INTR);

		// Activamos las interrupciones:
		microblaze_enable_interrupts();



		// Bucle para envío de pulsaciones "ficticias" para la simulación completa del circuito

		// Escribimos un 1.5
		// "Tecleamos" un 1
		cod_tecla = 1;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" un 5
		cod_tecla = 5;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" una A
		cod_tecla = 0xA;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);



		// Escribimos un 3.4
		// "Tecleamos" un 3
		cod_tecla = 3;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" un 4
		cod_tecla = 4;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" una A
		cod_tecla = 0xA;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);



		// Escribimos un 2.6
		// "Tecleamos" un 2
		cod_tecla = 2;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" un 6
		cod_tecla = 6;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" una A
		cod_tecla = 0xA;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);



		// Escribimos un 5.2
		// "Tecleamos" un 5
		cod_tecla = 5;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" un 2
		cod_tecla = 2;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// "Tecleamos" una A
		cod_tecla = 0xA;

		// Enviamos a la FPGA por el puerto GPO1 el valor de "cod_tecla"
		XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

		// Simulamos un pulso de “tecla_pulsada" escribiendo un "1" y un "0" en el GPO2
		tecla_pulsada = 1;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
		tecla_pulsada = 0;
		XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);


		// Fin de la simulación.
		// Pasamos a operación normal para el resto del programa.


		// Esta línea hace que el cursor se vaya arriba a la izquierda y se borre la pantalla
		xil_printf("\033[H\033[J");


		// Imprime unos mensajes de instrucciones de manejo
		xil_printf("\n\rPrograma de multiplicación de números complejos\n\r");
		xil_printf("Teclee 4 datos entre 0.0 y 9.9. Tras cada dato pulse 'A'\n\r");
		// xil_printf ("\t"); // Orden al Remote Lab de enviar todos los printf anteriores a la consola.


		u8 unid = 0, decim = 0,count = 0;
		u8 esperandoC = 0;
		while(1)
		{
			// Bucle para leer del teclado; comprobará si ocurre alguno de estos eventos:
			//
			// A) El usuario pulse alguna tecla de las que reconocemos para este programa (números del 0 al 9 o la
			// tecla 'A'). Si se pulsa una tecla no reconocida se vuelve a leer.
			//
			// B) Se active la interrupción Externa INTC.
			//
			// C) Se active la interrupción del Temporizador FIT1.
			// ----------------------------------------------------------
			// Tratamiento del caso A) El usuario ha pulsado alguna tecla.
			// ----------------------------------------------------------
			//
			// Hay que comprobar qué tecla es y enviarla hacia el módulo de cálculo.
			//
			// Comprobamos cuál es el carácter que ha pulsado el usuario comparándolo con los códigos ASCII
			// que nos interesan, que serán de la tecla "0" a la tecla "9", así como la "A".
			// Para cada pulsación habrá que generar un código de "cod_tecla_micro(3:0)" oportuno para enviarlo
			// hacia la FPGA posteriormente y una señal de sincronismo de “tecla_pulsada_micro”.
			// También habrá que imprimir por pantalla el carácter tecleado por el usuario para que lo vea,
			// siempre que sea un número, y el punto decimal cuando corresponda (en la 2ª cifra a introducir).

			// Leemos una tecla de la UART
			data = XIOModule_Recv(&iomodule, rx_buf, 1);

			// Si realmente se ha pulsado una tecla y se ha recibido, se comprueba la validez
			// de la tecla, siendo válida si es un número del '0' al '9', la letra 'A' 0 'C'

			if (data != 0)
			{
				// Se ha pulsado una tecla ya que se ha recibido un dato

				// Comprobamos la validez de la tecla pulsada

				if (((rx_buf[0] >= 48) && (rx_buf[0] <= 57)) && (esperandoC == 0))
				{
					// La tecla pulsada es un número entre el '0' y el '9'
					// y no se espera la letra 'C'

					if (count != 0)
					{
						// Se ha introducida un número antes
						// Desplazamos a las unidades la parte decimal
						unid = decim;
					}
					// Asignamos a la parte decimal el número introducido usando una máscara ya que los
					// cuatro bits menos significativos del código ASCII se corresponden con el número
					decim = rx_buf[0] & 0x0F;

					// Asignamos a la variable cod_tecla el valor de la tecla pulsada
					cod_tecla = decim;

					// Enviamos por el puerto GPO1 el valor de "cod_tecla"
					XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

					// Simulamos un pulso de "tecla_pulsada_micro"
					tecla_pulsada = 1;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
					tecla_pulsada = 0;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);

					// Incrementamos la cuenta de números introducidos
					count++;
				}
				else if (((rx_buf[0] == 65) || (rx_buf[0] == 97)) && (esperandoC == 0))
				{
					// La tecla pulsada es la 'A' y no se espera la letra 'C'

					// Asignamos el valor a cod_tecla
					cod_tecla = 0xA;

					// Enviamos por el puerto GPO1 el valor de "cod_tecla"
					XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

					// Simulamos un pulso de "tecla_pulsada_micro"
					tecla_pulsada = 1;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
					tecla_pulsada = 0;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);

					// Se muestra en la consola el dato tecleado
					xil_printf("%d.%d\n\r", unid, decim);
					//xil_printf("\t");

					// Resteamos el número introducido
					unid = 0;
					decim = 0;
					// Reseteamos el contador de números introducidos
					count = 0;
				}
				else if ((rx_buf[0] == 67) || (rx_buf[0] == 99))
				{
					// La tecla pulsada es la 'C'

					// Asignamos el valor a cod_tecla
					cod_tecla = 0xC;

					// Enviamos por el puerto GPO1 el valor de "cod_tecla"
					XIOModule_DiscreteWrite(&iomodule, 1, cod_tecla);

					// Simulamos un pulso de "tecla_pulsada_micro"
					tecla_pulsada = 1;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);
					tecla_pulsada = 0;
					XIOModule_DiscreteWrite(&iomodule, 2, tecla_pulsada);

					// Se resetea la condición de espera de la letra 'C'
					esperandoC = 0;
				}
			}
			// Volvemos al principio del bucle


			// -------------------------------------------------------------------
			// Tratamiento del caso B) Se ha activado la interrupción Externa INTC.
			// -------------------------------------------------------------------
			//
			// Hay que leer los resultados y sus signos, y escribirlos por pantalla.

			if (intc_ext == 1)
			{
				// Se activa la interrupción externa, que significa que hay datos que leer

				// Leemos los valores de Result_BCD_Real(15:0) y Result_BCD_Imag(15:0) de GPI1.
				GPI1 = XIOModule_DiscreteRead(&iomodule, 1);
				// Leemos los valores de Signo_Real y Signo_Imag de GPI2.
				GPI2 = XIOModule_DiscreteRead(&iomodule, 2);

				// Hacemos las operaciones lógicas necesarias a nivel de bit para separar los datos
				// del puerto GPI1 y los signos del puerto GPI2:
				// GPI1 --> bits(31:16) --> Result_BCD_Real(15:0) (serán decenas, unidades, décimas y centésimas en BCD)
				// GPI1 --> bits(15:0) --> Result_BCD_Imag(15:0) (serán decenas, unidades, décimas y centésimas en BCD)
				// GPI2 --> bit (0) --> Signo_Imag
				// GPI2 --> bit (1) --> Signo_Real

				// Haciendo uso de máscaras y desplazamientos obtenemos las cuatro cifras BCD de la parte real
				result_BCD_real[3] = (GPI1 >> 28);
				result_BCD_real[2] = (GPI1 >> 24) & 0x0F;
				result_BCD_real[1] = (GPI1 >> 20) & 0x0F;
				result_BCD_real[0] = (GPI1 >> 16) & 0x0F;

				// Haciendo uso de máscaras y desplazamientos obtenemos las cuatro cifras BCD de la parte imaginaria
				result_BCD_imag[3] = (GPI1 >> 12) & 0x0F;
				result_BCD_imag[2] = (GPI1 >>  8) & 0x0F;
				result_BCD_imag[1] = (GPI1 >>  4) & 0x0F;
				result_BCD_imag[0] = GPI1 & 0x0F;

				// Haciendo uso de máscaras y desplazamientos obtenemos los signos real e imaginario
				signo_real = (GPI2 >> 1) & 0x01;
				signo_imag = GPI2 & 0x01;


				// Usamos un desplazamiento y una máscara para obtener del GPI1 la parte real de la multiplicación
				result_BCD_real = (GPI1 >> 16) & 0x0000FFFF;

				// Usamos desplazamientos para convertir los bits que nos interesan en los 4 menos significativos
				// y aplicamos máscaras para quedarnos solo con esos cuatro bits
				buf_real[3] = (result_BCD_real >> 12) & 0x000F;
				buf_real[2] = (result_BCD_real >> 8) & 0x000F;
				buf_real[1] = (result_BCD_real >> 4) & 0x000F;
				buf_real[0] = result_BCD_real & 0x000F;

				// Usamos desplazamiento y una máscara para obtener el signo de la parte real
				signo_real = (GPI2 >> 1) & 0x01;

				// Usamos una máscara para obtener del GPI1 la parte imaginaria de la multiplicación
				result_BCD_imag = GPI1 & 0x0000FFFF;

				// Usamos desplazamientos para convertir los bits que nos interesan en los 4 menos significativos
				// y aplicamos máscaras para quedarnos solo con esos cuatro bits
				buf_imag[3] = (result_BCD_imag >> 12) & 0x000F;
				buf_imag[2] = (result_BCD_imag >> 8) & 0x000F;
				buf_imag[1] = (result_BCD_imag >> 4) & 0x000F;
				buf_imag[0] = result_BCD_imag & 0x000F;

				// Usamos una máscara para obtener el signo de la parte real
				signo_imag = GPI2 & 0x01;


				// Imprimimos por pantalla los datos leídos haciendo los "xil_printf" necesarios.
				// Tener en cuenta que hay que imprimir el signo, las cifras BCD y la coma decimal
				// en los sitios oportunos.
				xil_printf("\n\rEl resultado de la multiplicación compleja es:  ");

				// Se imprime por pantalla el signo de la parte real
				if (signo_real == 1)
				{
					// La parte real es negativa
					xil_printf("-");
				}
				// Imprimimos por pantalla la parte real
				xil_printf("%d%d.%d%d",result_BCD_real[3],result_BCD_real[2],result_BCD_real[1],result_BCD_real[0]);

				// Imprimimos por pantalla la parte imaginaria
				xil_printf("+%d%d.%d%dj\n\r",result_BCD_imag[3],result_BCD_imag[2],result_BCD_imag[1],result_BCD_imag[0]);
				// xil_printf("\t"); // Enviamos por pantalla al Remote Lab


				// Esperamos a que el usuario pulse la letra "C" para volver al inicio
				// Se activa el semáforo de espera de la letra 'C'
				esperaC = 1;

				// Reseteamos la condición de la interrupción externa
				intc_ext = 0;
			}
			// Volvemos al principio del bucle


			// -------------------------------------------------------------------
			// Tratamiento del caso C) Se ha activado la interrupción del Temporizador FIT1.
			// -------------------------------------------------------------------
			//
			// Hay que comprobar si han pasado 0,5 segundos desde la última conmutación del led.
			// En caso negativo no se hace nada y se vuelve al principio del bucle.
			// En caso positivo, se cambia de valor el led y se envía por GPO3.

			if (intc_fit1 == 1)
			{
				// Se activa la interrupción del FIT1, que ocurre cada 10 ms
				// Incrementamos el contador que lleva la cuenta del número de interrupciones del FIT1
				contador++;

				if (contador == 50)
				{
					// El número de interrupciones es igual a 50, que equivale a 0,5 s
					// Conmutamos el valor del led
					if (led == 0)
					{
						// Si el valor del led era LOW, lo cambiamos a HIGH
						led = 1;
					}
					else
					{
						// Si el valor del led era HIGH, lo cambiamos a LOW
						led = 0;
					}
					// Enviamos el valor del led por el GPO3
					XIOModule_DiscreteWrite(&iomodule, 3, led);

					// Reseteamos la cuenta
					contador = 0;
				}
				// Reseteamos la condición de la interrupción del FIT1
				intc_fit1 = 0;
			}
			// Volvemos al principio del bucle
		}
cleanup_platform();
return 0;
}

// source ipcore_dir/microblaze_mcs_setup.tcl
// microblaze_mcs_data2mem workspace/hello_world/debug/hello_world.elf
